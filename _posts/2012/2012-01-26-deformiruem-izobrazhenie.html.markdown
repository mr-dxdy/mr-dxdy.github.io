---
title: "Деформируем изображение"
author:
  display_name: "Герман"
  email: easy-coding@yandex.ru
tags:
- Новости
- Алгоритмы
---

Заканчивает серию программ по предмету "Обработка изображений" алгоритм "Деформация изображения". Не охота лить воду, ведь тема и так серьезная, поэтому с вашего позволения процитирую небольшой текст из лекции:

> Рассмотрим еще одно преобразование изображений, которое можно отнести к классу геометрических процессов. Суть его заключается в том, что на изображение с мелким шагом наносится регулярная триангуляционная сетка. Затем построенная сетка треугольников деформируется неким образом так, что связи между узлами сохраняются.

![Сетка треугольников](/posts/2012/01-26-deformiruem-izobrazhenie/grid_warping.jpeg)
<!-- excerpt-end -->
> Задача сводится к тому, чтобы на модифицированной сетке воссоздать исходное изображение со всеми деформациями, растяжениями и другими искажениями. Описанная идея называется ворпинг (от анг. warping &ndash; коробить, искривлять) &ndash; преобразование изображения, при котором оно в отдельных областях сжимается и растягивается &ndash; как будто изображение нанесено на резину. Во время ворпирования элементы преобразуемого изображения пытаются принять положение и форму элементов исходного.

Более подробно с лекциями по предмету Семенова А.Б. "Обработка изображений" можно познакомиться на сайте [developers.sun.ru](http://developers.sun.ru/content/view/232/121/).

**Добавлю свои пять копеек:** Идея такая же как и в масштабировании. У нас есть исходный треугольник и трансформированный. Да-да, нам нужно найти прообраз из результирующего треугольника в исходный. В нашем случаи рассмотрим все на примере

```
V1(x1,y1), V2(x2,y2), V3(x3,y3) - вершины треугольника.
V0(x0,y0) - точка в треугольнике.
T1(u1,v1), T2(u2,v2), T3(u3,v3) - текстурные координаты вершин треугольника.
Нужно найти T0(u0,v0).
Найдем барицентрические координаты (U,V - числа) точки V0.
V1 + U(V2 - V1) + V(V3 - V1) = V0
x1 + Ux2 - Ux1 + Vx3 - Vx1 = x0
y1 + Uy2 - Uy1 + Vy3 - Vy1 = y0
Решая эту систему уравнений находим U,V.
Теперь  T0 = T1 + U(T2 - T1) + V(T3 - T1).
Вот и все. Осталось теперь только закрасить точку V0(x0,y0) цветом T0
```

В задаче для сканирования треугольника, нам потребуется функция для проверки принадлежности точки треугольнику:

``` cpp
/*
  если одинакового знака то внутри,
  если хоть одно число равно 0 то точка лежит на грани,
  в остальных случаях лежит вне треугольника.
*/

bool Triangle::isInputPoint(const Point &point){
    Point *A = &m_arrayPoints[0],
            *B = &m_arrayPoints[1],
            *C = &m_arrayPoints[2];
   int N1 = (B->y()-A->y())*(point.x()-A->x()) - (B->x()-A->x())*(point.y()-A->y()),
            N2 = (C->y()-B->y())*(point.x()-B->x()) - (C->x()-B->x())*(point.y()-B->y()),
            N3 = (A->y()-C->y())*(point.x()-C->x()) - (A->x()-C->x())*(point.y()-C->y());
   return ((N1 > 0) && (N2 > 0) && (N3 > 0)) || ((N1 < 0) && (N2 < 0) && (N3 < 0))
            || N1 == 0 || N2 == 0 || N3 == 0;
}
```

Для полной картины не хватает примера:

![Ворпинг картинки](/posts/2012/01-26-deformiruem-izobrazhenie/girl_warping.jpeg)
